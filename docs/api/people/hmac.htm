---
layout: docs-api
title: Authenticate with HMAC proof
---
<div id="body">
<p>Processes an HMAC proof generated by a trusted party using a shared secret key, and uses it to authenticate a person.</p>
<p>The typical use case is when you already control an authentication server (such as your existing website), and need a way to have that server tell RunOrg that a given individual is authenticated. In this scenario, your authentication server plays the role of the trusted party and generates an HMAC proof which the client then sends to RunOrg using this endpoint.</p>
<h1> Request</h1>
<p>The request body contains the following fields:</p>


<table class="fields"><tr><td class="code"><code>id</code></td><td class="code"><code>&lt;id></code></td><td>The identifier of the person that the user is authenticating as.</td></tr><tr><td class="code"><code>expires</code></td><td class="code"><code>&lt;time></code></td><td>The time after which this token becomes invalid, formatted as an [ISO-8601 timestamp](/concepts/time.htm).</td></tr><tr><td class="code"><code>key</code></td><td class="code"><code>&lt;id></code></td><td>The identifier of the secret key used to compute the HMAC, as returned by the [create key endpoint](/keys/create.htm).</td></tr><tr><td class="code"><code>proof</code></td><td class="code"><code>&lt;hex></code></td><td>The HMAC proof, encoded in hexadecimal. &lt;/field> &lt;doc for="api"> The server generates the **assertion**, which is constructed as follows:  `auth:&lt;id>:until:&lt;expires>` For instance, if authenticating as user `0Et9j0026rO` until midnight on the first of may 2014, the assertion would be:  `auth:0Et9j0026rO:until:2014-05-01T23:59:59Z` Once the assertion is generated, the HMAC is computed using the stored key, and compared with the hex proof. # Response Always `200 OK`: this is an [idempotent](/concepts/idempotent.htm) endpoint. The response contains two fields: &lt;/doc> &lt;fields for="api"></td></tr><tr><td class="code"><code>token</code></td><td class="code"><code>&lt;token></code></td><td>An [authentication token](/auth/token.htm).</td></tr><tr><td class="code"><code>self</code></td><td class="code"><code>&lt;person></code></td><td>The [short profile](/people/person.htm) of the authenticated person.</td></tr></table>

<p>Please consult the Errors section below for ways to debug this method.</p>
<h1> Examples</h1>


<p class="caption">Example request</p><pre class="api">
POST /db/0Et4X0016om/people/auth/hmac
Content-Type: application/json

{ "id": "0Et9j0026rO",
  "expires": "2014-05-01T23:59:59Z",
  "key": "0wt3s0566xO",
  "proof": "5063ae6d2f7f858ea24598d7036f4a27a468a2fd" }
</pre>

<p class="caption">Example response</p><pre class="api">
 202 Accepted 
 Content-Type: application/json

 { "token": "7Rq03AsR92W",
   "self": { 
     "id" : "0Et9j0026rO",
     "label" : "Victor Nicollet",
     "gender" : "M", 
     "pic" : "https://www.gravatar.com/avatar/648e25e4372728b2d3e0c0b2b6e26f4e" } }
</pre>

<h1> Errors</h1>
<h2> Returns <code>400 Bad Request</code></h2>
<ul>
  <li> ... if <code>proof</code> was not correctly hex-encoded</li>
  <li> ... if <code>expires</code> has already passed</li>
</ul><h2> Returns <code>401 Forbidden</code></h2>
<ul>
  <li> ... if the proof is invalid.</li>
</ul><h2> Returns <code>404 Not Found</code></h2>
<ul>
  <li> ... if database <code>{db}</code> does not exist</li>
  <li> ... if key <code>{key}</code> does not exist in database <code>{db}</code></li>
  <li> ... if person <code>{id}</code> does not exist in database <code>{db}</code></li>
</ul>
<p>Debugging a <code>401</code> status code when HMACs and secret keys are involved can be very annoying ; the RunOrg API includes some helpful information to help you find the root cause.</p>


<p class="caption">Example 401 response</p><pre class="api">
401 Forbidden
Content-Type: application/json

{ "error" : "Invalid proof",
  "path"  : "/db/{db}/people/auth/hmac",
  "detail": {
    "assertion": "auth:0Et9j0026rO:until:2014-05-01T23:59:59Z",
    "debug": "d8ca358c10f5913f3e8f1b32a496116d6a6bfafb",
    "hash": "SHA-1" } }
</pre>

<p>First, make sure that the assertion you use is the same as the <code>assertion</code> returned by the API.</p>
<p>Then, make sure you are using the same <code>hash</code> (here, SHA-1) as the API.</p>
<p>Then, try running your HMAC code with an empty key (a key with only zeros): if it does not match the <code>debug</code> field, then your HMAC code is wrong.</p>
<p>Finally, if everything else works, it means the key you are using is incorrect. Try generating a new one.</p>
<h1> Access restrictions</h1>
<p>None: anyone can attempt to authenticate.</p>

</div>
<nav><ul class="above"><li><a href="/docs/api/index.htm">RunOrg documentation</a></li><li><a href="/docs/api/people.htm">People</a></li></ul><span class="active">Authenticate with HMAC proof</span></nav>